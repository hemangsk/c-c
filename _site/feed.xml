<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C &amp; C</title>
    <description>Coupling, Cohesion, COCOMO and everything</description>
    <link>http://hemangsk.github.io/</link>
    <atom:link href="http://hemangsk.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 Jun 2016 00:17:43 +0530</pubDate>
    <lastBuildDate>Fri, 03 Jun 2016 00:17:43 +0530</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 31 May 2016 14:21:02 +0530</pubDate>
        <link>http://hemangsk.github.io/blog/jekyll/update/2016/05/31/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/blog/jekyll/update/2016/05/31/welcome-to-jekyll.html</guid>
        
        
        <category>blog</category>
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Software Requirements Analysis &amp; Specification</title>
        <description>&lt;p&gt;There’s a thing called a software’s &lt;span class=&quot;udl&quot;&gt;life cycle&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;It is the period of time that starts when a software product and conceived and ends when the product is no longer available for use.&lt;/p&gt;

&lt;p&gt;The various processes or methodologies that are being selected for the development of the software are called &lt;span class=&quot;udl&quot;&gt;software life cycle models&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The ‘model’ thing sounds boring, but trust me its damn interesting, you will enjoy it all along!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Types of Models&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Build &amp;amp; Fix Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Product is constructed without specifications.&lt;/p&gt;

&lt;p&gt;Simple two phase model.&lt;/p&gt;

&lt;p&gt;Build Code -&amp;gt; Fix Code -&amp;gt; Build Code -&amp;gt; …&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Pros &amp;amp; Cons&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Suitable for small programming exercises of 100 or 200 lines.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Unsatisfactory for software for any reasonable size.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Code soon becomes unfixable &amp;amp; unenhanceable&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; No room for structured design&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Maintenance is practically not possible.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Waterfall Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This model is called waterfall because its diagrammatic representation resembles a waterfall.&lt;/p&gt;
&lt;div class=&quot;top-down-list&quot;&gt;

Requirement Analysis and specification

&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br /&gt;


Design&lt;br /&gt;


&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br /&gt;



Implementation &amp;amp; Unit Testing&lt;br /&gt;


&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br /&gt;


Integration &amp;amp; Integration Testing
&lt;br /&gt;

&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
&lt;br /&gt;

Operation &amp;amp; Maintenance
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Pros &amp;amp; Cons&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; It is difficult to define all requirements at the beginning of a project&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; This model is not suitable for accommodating any change&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; A working version of the system is not seen until late in the project’s life&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; It does not scale up well to large projects.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Real projects are rarely sequential&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;quote&quot;&gt;
  The following models come under the subtype -  &lt;em class=&quot;udl&quot;&gt;Incremental Process Models&lt;/em&gt;. &lt;br /&gt;

&lt;br /&gt;
  They are effective in the situations where requirements are defined precisely and there is no confusion about the functionality of the final product.
&lt;br /&gt;

&lt;br /&gt;
  After every cycle a useable product is given to the customer.

&lt;br /&gt;&lt;br /&gt;
  Popular particularly when we have to quickly deliver a limited functionality system.
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Iterative Enhancement Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So this is an &lt;span class=&quot;udl&quot;&gt;Incremental Process Software Life cycle model&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The Phases occur in same sequence as in Waterfall Model, but these things are different:-&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; In every step, a usable software is obtained.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; They are conducted in several cycles.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Cycles implement features on the basis of &lt;span class=&quot;udl&quot;&gt;priority&lt;/span&gt;. Most important feature in first cycle, second most important in second … so on.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; We jump from one step to next consecutive step while moving  &lt;span class=&quot;ddl&quot;&gt;down the waterfall&lt;/span&gt; and we can jump from one step to any other step, when we are moving in &lt;span class=&quot;ddl&quot;&gt;backward direction&lt;/span&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--EPM--&gt;
&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Evolutionary Process Models&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Incremental Process Software Life cycle model&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The Phases occur in same sequence as in Waterfall Model and Iterative Enhancement Model, but these things are different:-&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; It is not important to have a useable product at end of each cycle.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Cycles implement features on the basis of &lt;span class=&quot;udl&quot;&gt;category&lt;/span&gt;. Most important feature in first cycle, second most important in second … so on.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Used when the technology used in not fully understood.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Used in complex projects where all functionalities must be delivered at once in a package, but requirements are unstable in the begining.&lt;/p&gt;
&lt;hr /&gt;

&lt;!--PROTOTYPING--&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Prototyping Model&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The prototype may be a usable program but is not suitable as the final software product.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The code for the prototype is thrown away. However experience gathered helps in developing the actual system.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The development of a prototype might involve extra cost, but overall cost might turnout to be lower than that of an equivalent system developed using the waterfall model.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--spiral--&gt;
&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Spiral Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Incremental Process Software Life cycle model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Models do not deal with uncertainly which is inherent to software projects.
Important software projects have failed because project risks were neglected &amp;amp; nobody was prepared when something unforeseen happened.&lt;/p&gt;

&lt;p&gt;The radial dimension of the model represents the cumulative costs. Each path around the spiral is indicative of increased costs. The angular dimension represents the progress made in completing each cycle. Each loop of the spiral from X-axis clockwise through 360o represents one phase. One phase is split roughly into four sectors of major activities.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Planning: Determination of objectives, alternatives &amp;amp;
 constraints.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Risk Analysis: Analyze alternatives and attempts to identify and resolve the risks involved&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Development: Product development and testing product.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Assessment: Customer evaluation&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;An important feature of the spiral model is that each phase is completed with a review by the people concerned with the project (designers and programmers)&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;  The advantage of this model is the wide range of options to accommodate the good features of other life cycle models.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;  It becomes equivalent to another life cycle model in appropriate situations.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--RAD--&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Rapid Application Development Model&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;The Unified Process&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The goal of producing good quality maintainable software within specified time and budget.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Maintained and enhanced by Rational Software Corporation and thus referred to as Rational Unified Process (RUP).&lt;/p&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Phases Of Unified Process&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;top-down-list&quot;&gt;

Inception

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Definition of objectives&lt;br /&gt;
&lt;br /&gt;


Elaboration

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Planning &amp;amp; Architecture for project&lt;br /&gt;
&lt;br /&gt;


Construction

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Initial Operational Capability&lt;br /&gt;
&lt;br /&gt;


Transition

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Release of the software product&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:28 +0530</pubDate>
        <link>http://hemangsk.github.io/software/2016/05/30/term000.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/software/2016/05/30/term000.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Life Cycle Models</title>
        <description>&lt;p&gt;There’s a thing called a software’s &lt;span class=&quot;udl&quot;&gt;life cycle&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;It is the period of time that starts when a software product and conceived and ends when the product is no longer available for use.&lt;/p&gt;

&lt;p&gt;The various processes or methodologies that are being selected for the development of the software are called &lt;span class=&quot;udl&quot;&gt;software life cycle models&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The ‘model’ thing sounds boring, but trust me its damn interesting, you will enjoy it all along!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Types of Models&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Build &amp;amp; Fix Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Product is constructed without specifications.&lt;/p&gt;

&lt;p&gt;Simple two phase model.&lt;/p&gt;

&lt;p&gt;Build Code -&amp;gt; Fix Code -&amp;gt; Build Code -&amp;gt; …&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Pros &amp;amp; Cons&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Suitable for small programming exercises of 100 or 200 lines.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Unsatisfactory for software for any reasonable size.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Code soon becomes unfixable &amp;amp; unenhanceable&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; No room for structured design&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Maintenance is practically not possible.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Waterfall Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This model is called waterfall because its diagrammatic representation resembles a waterfall.&lt;/p&gt;
&lt;div class=&quot;top-down-list&quot;&gt;

Requirement Analysis and specification

&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br /&gt;


Design&lt;br /&gt;


&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br /&gt;



Implementation &amp;amp; Unit Testing&lt;br /&gt;


&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br /&gt;


Integration &amp;amp; Integration Testing
&lt;br /&gt;

&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
&lt;br /&gt;

Operation &amp;amp; Maintenance
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Pros &amp;amp; Cons&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; It is difficult to define all requirements at the beginning of a project&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; This model is not suitable for accommodating any change&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; A working version of the system is not seen until late in the project’s life&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; It does not scale up well to large projects.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Real projects are rarely sequential&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;quote&quot;&gt;
  The following models come under the subtype -  &lt;em class=&quot;udl&quot;&gt;Incremental Process Models&lt;/em&gt;. &lt;br /&gt;

&lt;br /&gt;
  They are effective in the situations where requirements are defined precisely and there is no confusion about the functionality of the final product.
&lt;br /&gt;

&lt;br /&gt;
  After every cycle a useable product is given to the customer.

&lt;br /&gt;&lt;br /&gt;
  Popular particularly when we have to quickly deliver a limited functionality system.
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Iterative Enhancement Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So this is an &lt;span class=&quot;udl&quot;&gt;Incremental Process Software Life cycle model&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The Phases occur in same sequence as in Waterfall Model, but these things are different:-&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; In every step, a usable software is obtained.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; They are conducted in several cycles.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Cycles implement features on the basis of &lt;span class=&quot;udl&quot;&gt;priority&lt;/span&gt;. Most important feature in first cycle, second most important in second … so on.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; We jump from one step to next consecutive step while moving  &lt;span class=&quot;ddl&quot;&gt;down the waterfall&lt;/span&gt; and we can jump from one step to any other step, when we are moving in &lt;span class=&quot;ddl&quot;&gt;backward direction&lt;/span&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--EPM--&gt;
&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Evolutionary Process Models&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Incremental Process Software Life cycle model&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The Phases occur in same sequence as in Waterfall Model and Iterative Enhancement Model, but these things are different:-&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; It is not important to have a useable product at end of each cycle.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Cycles implement features on the basis of &lt;span class=&quot;udl&quot;&gt;category&lt;/span&gt;. Most important feature in first cycle, second most important in second … so on.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Used when the technology used in not fully understood.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Used in complex projects where all functionalities must be delivered at once in a package, but requirements are unstable in the begining.&lt;/p&gt;
&lt;hr /&gt;

&lt;!--PROTOTYPING--&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Prototyping Model&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The prototype may be a usable program but is not suitable as the final software product.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The code for the prototype is thrown away. However experience gathered helps in developing the actual system.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The development of a prototype might involve extra cost, but overall cost might turnout to be lower than that of an equivalent system developed using the waterfall model.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--spiral--&gt;
&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Spiral Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Incremental Process Software Life cycle model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Models do not deal with uncertainly which is inherent to software projects.
Important software projects have failed because project risks were neglected &amp;amp; nobody was prepared when something unforeseen happened.&lt;/p&gt;

&lt;p&gt;The radial dimension of the model represents the cumulative costs. Each path around the spiral is indicative of increased costs. The angular dimension represents the progress made in completing each cycle. Each loop of the spiral from X-axis clockwise through 360o represents one phase. One phase is split roughly into four sectors of major activities.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Planning: Determination of objectives, alternatives &amp;amp;
 constraints.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Risk Analysis: Analyze alternatives and attempts to identify and resolve the risks involved&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Development: Product development and testing product.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Assessment: Customer evaluation&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;An important feature of the spiral model is that each phase is completed with a review by the people concerned with the project (designers and programmers)&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;  The advantage of this model is the wide range of options to accommodate the good features of other life cycle models.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;  It becomes equivalent to another life cycle model in appropriate situations.&lt;/p&gt;

&lt;hr /&gt;

&lt;!--RAD--&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;Rapid Application Development Model&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;The Unified Process&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; The goal of producing good quality maintainable software within specified time and budget.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-arrow-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Maintained and enhanced by Rational Software Corporation and thus referred to as Rational Unified Process (RUP).&lt;/p&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Phases Of Unified Process&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;top-down-list&quot;&gt;

Inception

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Definition of objectives&lt;br /&gt;
&lt;br /&gt;


Elaboration

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Planning &amp;amp; Architecture for project&lt;br /&gt;
&lt;br /&gt;


Construction

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Initial Operational Capability&lt;br /&gt;
&lt;br /&gt;


Transition

&lt;br /&gt;&lt;br /&gt;
&lt;i class=&quot;fa fa-arrow-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=&quot;fa fa-arrow-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Release of the software product&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:28 +0530</pubDate>
        <link>http://hemangsk.github.io/software/2016/05/30/term00.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/software/2016/05/30/term00.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Software Certification</title>
        <description>&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Types of Certification&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em class=&quot;udl&quot;&gt;Certification of People&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em class=&quot;udl&quot;&gt;Certification of Process&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em class=&quot;udl&quot;&gt;Certification of Product&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;udl&quot;&gt;Certification of People&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Professional level of competence in the principles &amp;amp; practices of software quality assurance in the software industry can be achieved by acquiring the designation of:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Certified Software Quality Analyst (CSQA) &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Certified Software Tester (CSTE)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Certified Software Project Manager (CSPM)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Some company specific certifications are also very popular like Microsoft Office Specialist (MOS) certifications in Word, Excel and PowerPoint.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;udl&quot;&gt;MOS&lt;/span&gt; is far best known computer skills certification for administrator.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;udl&quot;&gt;Certification of Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The most popular ones to know are,&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;ISO 9000 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;SEI-CMM&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;udl&quot;&gt;Certification of Products&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the one &lt;span class=&quot;udl&quot;&gt;required for the customer&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;There is no standard certification but a popular one is by the aviation industry called “TCA DO-178B”.&lt;/p&gt;

&lt;p&gt;This “TCA DO-178B” is divided into levels A, B, C, D, or E.&lt;/p&gt;

&lt;p&gt;These levels describe the consequences of a potential failure of the software :&lt;span class=&quot;udl&quot;&gt; catastrophic, hazardous severe, major, minor or no effect&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Third Party certification for Component Based Software Engineering&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Component Based Software Engineering&lt;/span&gt; is the process in which software is created by assembling different components.&lt;/p&gt;

&lt;p&gt;Third party certification is a method to ensure software components conform to well defined standards based on this certification and thus trusted assemblies of components can be constructed.&lt;/p&gt;

&lt;p&gt;Here’s how it works, the contractor gives  the company/developer the software project to make, apart from that, the contractor also &lt;span class=&quot;udl&quot;&gt;gives the standard&lt;/span&gt;, &lt;span class=&quot;udl&quot;&gt;directs any variations in specification&lt;/span&gt;, &lt;span class=&quot;udl&quot;&gt;defines patterns&lt;/span&gt;, &lt;span class=&quot;udl&quot;&gt; defines allowable tolerances&lt;/span&gt;, &lt;span class=&quot;udl&quot;&gt; fixes the date of delivery.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;

</description>
        <pubDate>Mon, 30 May 2016 00:00:28 +0530</pubDate>
        <link>http://hemangsk.github.io/software/2016/05/30/term0.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/software/2016/05/30/term0.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Software Terminologies</title>
        <description>&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Deliverables and Milestones&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl strong&quot;&gt;Deliverables&lt;/span&gt; A tangible or intangible object produced as a result of the project that is intended to be delivered to a customer. These are generated during software development. Examples of different deliverables are &lt;span class=&quot;udl&quot;&gt;source code, user manuals, operating procedure, manuals etc&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Milestones&lt;/span&gt; Events that are used to ascertain the status of the project.
Examples of milestones,  &lt;span class=&quot;udl&quot;&gt;Finalization of project, Completion of design documentation&lt;/span&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Measures and Metrics&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Measures&lt;/span&gt; A measure provides a quantitative indication of the extent, dimension, size, capacity, efficiency, productivity or reliability of some attributes of a product or process&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Measurement&lt;/span&gt; Measurement is the act of evaluating a measure.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Metrics&lt;/span&gt; A metric is a quantitative measure of the degree to which a system, component or process possesses a given attribute.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Product and Process&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Product&lt;/span&gt; What is delivered to the customer, is called a &lt;span class=&quot;udl&quot;&gt;product&lt;/span&gt;. It may include source code, specification document, manuals, documentation etc and basically, it is nothing but &lt;span class=&quot;udl&quot;&gt;a set of deliverables&lt;/span&gt; only.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Process&lt;/span&gt; Process is the way in which we produce software. It is the &lt;span class=&quot;udl&quot;&gt;collection of activities that leads to (a part of) a product&lt;/span&gt;. An efficient process is required to produce good quality products.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Product and Process Metrics&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Product Metrics&lt;/span&gt; They are the measures for the software products, example,
&lt;span class=&quot;udl&quot;&gt;Size, Reliability, Complexity&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Process Metrics&lt;/span&gt; They quantify the attributes of software development process and environment, example, &lt;span class=&quot;udl&quot;&gt;Productivity, Quality, Efficiency&lt;/span&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Productivity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Productivity&lt;/span&gt; It is the rate of O/P per unit effort.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Module and Component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Module&lt;/span&gt; Independently deliverable piece of functionality providing access to its services (methods - in case of Classes [OOP]) through interfaces with or without any encapsulation.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Component&lt;/span&gt; They are also called elements. They are the elements of a executing system and together compose a larger system. So they are different from module in a way that they are defined at software system level whereas module are defined at programming language level.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em class=&quot;ddl&quot;&gt;Generic and Customized Products&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Generic Products&lt;/span&gt; Generic products are developed for anonymous customers. The target is generally the entire world and many copies are expected to be sold. Infrastructure software like operating system, compilers, analyzers, word processors, CASE tools etc.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;ddl&quot;&gt;Customized Products&lt;/span&gt; The customized products are developed for particular customers. The specific product is designed and developed as per customer requirements. Most of the development projects (say about 80%)come under this category&lt;/p&gt;
&lt;hr /&gt;

</description>
        <pubDate>Sun, 29 May 2016 19:20:28 +0530</pubDate>
        <link>http://hemangsk.github.io/software/2016/05/29/term.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/software/2016/05/29/term.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Glitters and Gold!</title>
        <description>&lt;p&gt;Software Industry = Software Company’s Management + Customers + Developers&lt;/p&gt;

&lt;p&gt;Software Company’s Management are the people who &lt;span class=&quot;udl&quot;&gt;manage the process of software development&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Customers are the ones &lt;span class=&quot;udl&quot;&gt;for whom the software is being developed&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Developers are the people &lt;span class=&quot;udl&quot;&gt;who develop the software&lt;/span&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;span class=&quot;ddl&quot;&gt;&lt;em&gt;The biggest myths which the management believes are,&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;li&gt;Our company has perfect standard and clear procedures.&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Dude! You gotta come see the cabins!&lt;/span&gt;&lt;/p&gt;
&lt;li&gt;Our company has excellent infrastructure. Thus the software&#39;s gonna be great!&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt; Yeah we’ll see.&lt;/span&gt;&lt;/p&gt;
&lt;li&gt;If we hire more software specialists, we can catch up with the timeline.&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Chances are, that this new hiring might delay it more.&lt;/span&gt;&lt;/p&gt;
&lt;li&gt;Software is easy to change!&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Duh!&lt;/span&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;span class=&quot;ddl&quot;&gt;&lt;em&gt;The myths which the customers believe are,&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;li&gt;A general statement of objectives is sufficient to
  get started with the development of software. Missing/vague requirements
  can easily be incorporated/detailed out as they get concretized.&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Betcha don’t want a good software!&lt;/span&gt;&lt;/p&gt;
&lt;li&gt;Software with more features is better software&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Nope!&lt;/span&gt;&lt;/p&gt;
&lt;li&gt;Software can work right the first time&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Neither.&lt;/span&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;span class=&quot;ddl&quot;&gt;&lt;em&gt;The myths which the developers believe are,&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;li&gt;Software demonstrated, job&#39;s done!&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt;Not yet! The job’s also to optimize it.&lt;/span&gt;&lt;/p&gt;
&lt;li&gt;Software quality can not be assessed before testing.&lt;/li&gt;
&lt;p&gt;&lt;span class=&quot;cmnt&quot;&gt; It can be done and it should be done.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The study of Software engineering tells us why these myths are myths, And what is the correct approach of doing things.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 17:50:28 +0530</pubDate>
        <link>http://hemangsk.github.io/software/2016/05/29/glitters-and-gold.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/software/2016/05/29/glitters-and-gold.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Elementary Analysis</title>
        <description>&lt;p&gt;The definition of software is given as,&lt;/p&gt;

&lt;p&gt;Software = Program &lt;strong&gt;+&lt;/strong&gt; Documentation &lt;strong&gt;+&lt;/strong&gt; Operating Procedures&lt;/p&gt;

&lt;p&gt;Program is the &lt;span class=&quot;udl&quot;&gt;code&lt;/span&gt; &lt;i class=&quot;fa fa-code&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Documentation is nothing but a bunch of &lt;span class=&quot;udl&quot;&gt;manuals&lt;/span&gt; &lt;i class=&quot;fa fa-file&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Operating Procedures are also nothing but &lt;span class=&quot;udl&quot;&gt;a bunch of manuals&lt;/span&gt; &lt;i class=&quot;fa fa-file&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/documentation.png&quot; alt=&quot;Documentation Manuals&quot; /&gt; &lt;img src=&quot;/assets/operating.png&quot; alt=&quot;Operating Procedures&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The process of making a software/software product is called &lt;span class=&quot;udl&quot;&gt;software production&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The engineering branch which deals with all the inner and outer aspects of software production is called &lt;span class=&quot;udl&quot;&gt;Software Engineering&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The two of the most popular formal definitions of software engineering are,&lt;/p&gt;

&lt;div class=&quot;quote&quot;&gt;
  “A discipline whose aim is the production of quality software, software that is delivered on time, within budget, and that satisfies its requirements&quot; - &lt;em&gt;Stephen Schach&lt;/em&gt;
&lt;/div&gt;

&lt;div class=&quot;quote&quot;&gt;
  &quot;The establishment and use of sound engineering principles in order to obtain economically developed software that is reliable and works efficiently on real machines&quot; - &lt;em&gt;Fritz Bauer&lt;/em&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 29 May 2016 15:58:35 +0530</pubDate>
        <link>http://hemangsk.github.io/software/engineering/2016/05/29/elementary-analysis.html</link>
        <guid isPermaLink="true">http://hemangsk.github.io/software/engineering/2016/05/29/elementary-analysis.html</guid>
        
        
        <category>software</category>
        
        <category>engineering</category>
        
      </item>
    
  </channel>
</rss>
